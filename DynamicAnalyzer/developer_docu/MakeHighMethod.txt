>> HOW HelperClass.MakeHigh() works<<

Jimple stores every variable in a local when passing it as an argument to a method. 
So even if you want set a field-level to high, the field value first is stored in
a local. 

Conclusions:

1. You must assign the return-value of MakeHigh method to the original vairable,
	e.g. field = makeHigh(field)
	
2. The returnvalue of the method must be set to high, because in Jimple, the result
	is assigned to an other temporal local than the original one. So it doesn't make sense
    to set the argument's local to high. Even the local isn't stored in the same local again...
	Example: 
		String field;
		...
		$r0 = field;
		$r1 = makeHigh($r0) // You can't just set $r0 to high
		field = $r1
		
3. Is it neccessary, that the makeHigh method has an argument?
	Another approach could be to detect this method as the right argument in an
	assign statement and directly set the securitylevel of the left argument

4. Which kinds of variable types can be set to high?
	fields, locals, arrays?




<<<<< EXAMPLE FOR JIMPLE >>>>>>>>>
 java.lang.String[] r0, r2, $r3;
        java.lang.String r1, r5, r6, $r7, $r9;
        java.lang.Object $r4, $r8;

        r0 := @parameter0: java.lang.String[];
        r1 = "";
        $r3 = newarray (java.lang.String)[2];
        $r3[0] = "a";
        $r3[1] = "b";
        r2 = $r3;
        $r4 = staticinvoke <utils.analyzer.HelperClass: java.lang.Object makeHigh(java.lang.Object)>(r1);
        r5 = (java.lang.String) $r4;
        r6 = "bg";
        
        $r7 = <main.testclasses.MakeHigh: java.lang.String field>;
        $r8 = staticinvoke <utils.analyzer.HelperClass: java.lang.Object makeHigh(java.lang.Object)>($r7);
        $r9 = (java.lang.String) $r8;
        <main.testclasses.MakeHigh: java.lang.String field> = $r9;
        return;
        
SOLUTION
